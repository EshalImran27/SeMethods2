# Name of the workflow (will show up in GitHub Actions UI)
name: CI
# Trigger workflow on each push to the repository
on: push

jobs:
  build:
    # Job name
    name: Hello world action
    # Use the Ubuntu 22.04 runner provided by GitHub
    runs-on: ubuntu-22.04

    steps:
      # Step 1: Check out the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK) version 17 using the Temurin distribution
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build the project using Maven (cleans and packages into a JAR)
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Verify that the JAR file was created in the target directory
      - name: Verify JAR exists
        run: ls -la target/

      # Step 5: Cleanup containers and network from previous runs to avoid conflicts
      - name: Cleanup previous runs
        run: |
          docker stop devopscontainer || true
          docker rm devopscontainer || true
          docker stop mongo-dbserver || true
          docker rm mongo-dbserver || true
          docker network rm se-methods || true

      # Step 6: Setup Docker network and MongoDB container
      - name: Setup network and MongoDB
        run: |
          docker network create --driver bridge se-methods
          docker pull mongo
          docker run -d --name mongo-dbserver --network se-methods mongo
          sleep 10  # Wait for MongoDB to start

      # Step 7: Build Docker image for the application
      - name: Build Docker image
        run: docker build -t se_methods .

      # Step 8: Run application container and connect it to the MongoDB container
      - name: Run application container
        run: docker run --network se-methods --name devopscontainer se_methods

      # Step 9: View application logs for debugging purposes
      - name: View logs
        run: docker logs devopscontainer